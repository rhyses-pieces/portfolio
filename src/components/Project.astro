---
import Figure from "./Figure.astro";
import Tag from "./Tag.astro";
import { Icon } from "astro-icon/components";
import type { TransitionAnimationPair, TransitionDirectionalAnimations } from "astro";

interface Props {
  transitionName: string;
  title: string;
  id: string;
  date: Date;
  tags: string[];
  projectUrl: string;
  imageUrl: string | ImageMetadata;
  imageAlt: string;
  imageCaption?: string;
}

const anim: TransitionAnimationPair = {
  old: {
    name: "scale-down",
    duration: "0.4s",
    easing: "ease-out",
    fillMode: "forwards",
  },
  new: {
    name: "scale-up",
    duration: "0.4s",
    easing: "ease-in",
    fillMode: "backwards",
  }
};

const scaleUp: TransitionDirectionalAnimations = {
  forwards: anim,
  backwards: anim,
}

const { transitionName, title, id, date, tags, projectUrl, imageUrl, imageAlt, imageCaption } = Astro.props;
---
<article transition:name={transitionName} transition:animate={scaleUp} class="project">
  <header>
    <h1 transition:name={`project-${id}-header`}><a href={id}>{title}</a></h1>
    <a class="link" href={projectUrl} rel="nofollow">
      <span class="sr-only">Project link leading out to {projectUrl.includes("itch.io") ? "Itch.io" : "GitHub"}</span>
      {projectUrl.includes("itch.io") ? <Icon name="itch" /> : <Icon name="github" />}
    </a>
  </header>
  <Figure transition:name={`project-${id}-image`} src={imageUrl} alt={imageAlt} caption={imageCaption} />
  <time datetime={date.toISOString()}>
    Posted on 
    {date.toLocaleString("en-us", { month: "long", day: "numeric", year: "numeric", timeZoneName: "short" })}
  </time>
  <ul>
    {tags.map((tag, index) => (
      <Tag index={index} tag={tag} />
    ))}
  </ul>
</article>

<style>
  [data-icon] { aspect-ratio: 1; }

  article {
    padding: 1.5rem;
    color: var(--text-on-secondary);
    background-color: var(--secondary);
    border: var(--border) var(--border-color);
    border-radius: var(--container-radius);
    box-shadow: var(--box-shadow);

    header {
      display: flex;
      align-items: flex-end;
      flex-wrap: wrap;
      margin-bottom: 2rem;

      > .link { 
        align-self: start;
        display: grid;
        place-content: center;
        white-space: nowrap; 
        text-decoration: none;
        font-size: 1.5rem;
        color: var(--background);
        background-color: var(--text);
        padding: calc(0.5rem - 2px);
        border: var(--border) transparent;
        border-radius: 50%;

        .icon {
          width: 1em;
          height: 1em;
          fill: none;
          stroke: currentColor;
          stroke-width: 2px;
          stroke-linecap: round;
          stroke-linejoin: round;
        }

        &:hover, &:focus { 
          color: var(--text);
          background-color: var(--background);
          border-color: var(--border-color);
          border-radius: var(--border-radius);

          @media (prefers-reduced-motion) {
            border-radius: 50%;
          }
        }
      }

      h1 {
        flex-grow: 1;
        font-size: clamp(2.0736rem, 1.8395rem + 1.1704vw, 2.7466rem);
        margin-top: -0.5rem;
        margin-left: -0.5rem;

        > a {
          color: var(--background);
          text-decoration: underline wavy var(--text) 3px;
          text-underline-offset: 0.75rem;
          padding: 0.25rem;
          background-color: var(--text);

          &:hover, &:focus { 
            color: var(--text-on-secondary); 
            background-color: transparent;
          }
        }
      }
    }

    time {
      display: inline-block;
      font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
      font-size: 1rem;
      margin: 0.5rem 0;
    }

    ul {
      list-style: none;
      margin: 0;
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 0.5rem;
    }

    &:nth-of-type(even) { transform: rotate(1.25deg); }
    &:nth-of-type(2n-1) { transform: rotate(-1deg); }
    &:nth-of-type(3n) { transform: rotate(0.75deg); }
    &:nth-of-type(4n) { transform: none; }
  }

  :global([data-theme=dark]) article {
    ul > li {
      &.active {
        color: #000 !important;
        border-color: transparent;
        outline-offset: 2px;
      }
    }
  }

  :global(.fonts-loaded) article { 
    time { font-family: var(--accent-font); }
  }

  .hide { display: none; }
  .show { display: block; }

  @keyframes scale-up {
    0% {
      transform: scale(0.85);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes scale-down {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(0.85);
      opacity: 0;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const colors = ["red", "orange", "yellow", "green", "blue", "indigo"];
    const randomColor = (array: string[]) => array[Math.floor(Math.random() * array.length)];
    document.querySelectorAll<HTMLElement>("article > header > h1 a").forEach(element => {
      element.style.textDecorationColor = `var(--${randomColor(colors)})`;
    });
  });
</script>