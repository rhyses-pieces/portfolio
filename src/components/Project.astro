---
import Figure from "./Figure.astro";
import Tag from "./Tag.astro";

interface Props {
  title: string;
  slug: string;
  date: Date;
  tags: string[];
  imageUrl: string;
  imageAlt: string;
}

const { title, slug, date, tags, imageUrl, imageAlt } = Astro.props;
---
<article transition:name={`project ${slug}`} class="project">
  <header>
    <h1 transition:name={`project ${slug} header`}><a href={slug}>{title}</a></h1>
    <a href="http://github.com/" target="_blank" title={title} rel="noopener noreferrer">
      <svg xmlns="http://www.w3.org/2000/svg" class="icon" role="img" aria-labelledby=`${title}-project-icon-label` focusable="false" viewBox="0 0 24 24">
        <title id=`${title}-project-icon-label`>{title} on GitHub</title>
        <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"/><path d="M9 18c-4.51 2-5-2-7-2"/>
      </svg>
    </a>
  </header>
  <Figure src={imageUrl} alt={imageAlt} />
  <time datetime={date.toISOString()}>
    Posted on 
    {date.toLocaleString("en-us", { month: "long", day: "numeric", year: "numeric", timeZoneName: "short" })}
  </time>
  <ul>
    {tags.map((tag, index) => (
      <Tag index={index} tag={tag} />
    ))}
  </ul>
</article>

<style>
  article {
    padding: 1.5rem;
    color: var(--text-on-secondary);
    background-color: var(--secondary);
    border: var(--border) var(--border-color);
    border-radius: var(--container-radius);
    box-shadow: var(--box-shadow);

    & header {
      display: flex;
      align-items: flex-end;
      flex-wrap: wrap;
      margin-bottom: 2rem;

      & > a { 
        display: grid;
        place-content: center;
        white-space: nowrap; 
        text-decoration: none;
        font-size: 1.5rem;
        color: var(--background);
        background-color: var(--text);
        padding: calc(0.5rem - 2px);
        border: var(--border) transparent;
        border-radius: 50%;

        & .icon {
          width: 1em;
          height: 1em;
          fill: none;
          stroke: currentColor;
          stroke-width: 2px;
          stroke-linecap: round;
          stroke-linejoin: round;
        }

        &:hover, &:focus { 
          color: var(--text);
          background-color: var(--background);
          border-color: var(--border-color);
          border-radius: var(--border-radius);

          @media (prefers-reduced-motion) {
            border-radius: 50%;
          }
        }
      }

      & h1 {
        flex-grow: 1;
        font-size: 2rem;
        margin-top: 0;
        margin-bottom: 0;
        margin-left: -0.5rem;

        & a {
          color: var(--text-on-primary);
          text-decoration: underline wavy var(--text) 3px;
          text-underline-offset: 0.75rem;
          padding: 0.25rem;
          background-color: var(--primary);

          &:hover, &:focus { 
            color: var(--text-on-secondary); 
            background-color: transparent;
          }
        }
      }
    }

    & time {
      font-family: var(--accent-font);
      font-size: 1rem;
    }

    & ul {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      list-style: none;
      gap: 1rem;
      margin-bottom: 0;
      padding: 0;
    }

    &:nth-of-type(2) { transform: rotate(1.5deg); }
    &:nth-of-type(2n-1) { transform: rotate(-1deg); }
    &:nth-of-type(3) { transform: rotate(0.75deg); }
  }

  :global([data-theme=dark]) article {
    & ul > li {
      &.active {
        color: #000 !important;
        border-color: transparent;
        outline-offset: 2px;
      }
    }
  }

  .hide { display: none; }
  .show { display: block; }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const colors = ["red", "orange", "yellow", "green", "blue", "indigo"];
    const randomColor = (array: string[]) => { return array[Math.floor(Math.random() * array.length)] };
    document.querySelectorAll("article > header > h1 a").forEach(element => {
      (element as HTMLElement).style.textDecorationColor = `var(--${randomColor(colors)})`;
    });
  });
</script>