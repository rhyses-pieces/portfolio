---
import { getCollection } from "astro:content";
import Base from "@/layouts/Base.astro";
import Project from "@/components/Project.astro";

const projects = await getCollection("projects");
const tags = [...new Set(projects.map(project => project.data.tags).flat())].slice(0,5);
const sortedProjects = projects
  .filter(project => { return import.meta.env.PROD ? project.data.draft !== true : true; })
  .sort((a, b) => { return b.data.date.getTime() - a.data.date.getTime(); });
---
<Base title="rhyses pieces | projects">
  <h1>Projects</h1>
  <aside aria-label="filter by tag">
    Tags list: 
    <div>
      {tags.map(tag => (
        <button type="button" class="filter" aria-pressed="false" value={tag}>{tag}</button>
      ))}
    </div>
    {(tags.length === 5) ? (<a href="/projects/tags">See more tags?</a>) : null}
    <button id="reset-tags">Reset</button>
  </aside>
  <section>
    <div class="container">
      {sortedProjects?.map(project => (
        <Project 
          transitionName={`project-${project.id}`}
          title={project.data.title} 
          id={`/projects/${project.id}`}
          date={project.data.date}
          tags={project.data.tags}
          projectUrl={project.data.projectUrl}
          imageUrl={project.data.image.source}
          imageAlt={project.data.image.alt}
          imageCaption={project.data.image.caption}
        />
      ))}
    </div>
  </section>
</Base>

<style>
  [aria-label="filter by tag"] {
    display: flex;
    flex-flow: row wrap;
    align-items: baseline;
    gap: 1rem;
    margin-bottom: 1rem;

    div {
      flex: 1 1 500px;
      display: inline-flex;
      justify-content: flex-start;
      flex-wrap: wrap;
      gap: 0.5rem;

      > .filter {
        white-space: nowrap;
        &::before { content: "#"; }
        &[aria-pressed="true"] { 
          color: var(--text-on-secondary);
          background-color: var(--secondary);
        }
      }
    }

    > #reset-tags { 
      font-size: 1.25rem; 
      font-weight: bold;
      margin-left: auto;
    }
  }

  section {
    grid-column: 1 / -1;
    display: grid;

    .container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
      place-content: center;
      gap: 2rem;
      padding-inline: clamp(0.5rem, 1rem, 2rem);
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const projects = Array.from(document.querySelectorAll(".project"));
    const tagButtons = Array.from(document.querySelectorAll<HTMLButtonElement>(".filter"));
    const tags = Array.from(document.querySelectorAll(".tag"));

    tagButtons.map(button => {
      button.addEventListener("click", event => {
        const target = event.target as HTMLButtonElement;
        tagButtons.map(button => button.ariaPressed = "false");
        target.ariaPressed = "true";
        filter(target.value);
      });
    });

    function filter(target: string) {
      tags.map(tag => tag.classList.remove("active"));
      tags.filter(tag => tag.textContent == target).map(tag => tag.classList.add("active"));
      let search = projects.filter(project => {
        let projectTags = project.querySelectorAll(".tag")
        return projectTags.values().find(tag => tag.innerHTML == target);
      });
      projects.map(project => project.className = "hide");
      search.map(match => match.className = "show");
    }

    document.getElementById("reset-tags")?.addEventListener("click", () => {
      projects.map(element => element.classList.remove("hide", "show"));
      tagButtons.map(element => element.ariaPressed = "false");
      tags.map(element => element.classList.remove("active"));
    });
  });
</script>