---
import { getCollection } from "astro:content";
import Base from "@/layouts/Base.astro";
import Project from "@/components/Project.astro";

const projects = await getCollection("projects");
const tags = [...new Set(projects.map(project => project.data.tags).flat())].slice(0,5);
const sortedProjects = projects
  .filter(project => { return import.meta.env.PROD ? project.data.draft !== true : true; })
  .sort((a, b) => { return b.data.date.getTime() - a.data.date.getTime(); });
---
<Base title="rhyses pieces | projects">
  <section>
    <h1>Projects</h1>
    <div aria-label="filter by tag">
      Tags list: 
      <div>
        {tags.map(tag => (
          <button type="button" class="filter" aria-pressed="false">{tag}</button>
        ))}
      </div>
      {(tags.length === 5) ? (<a href="/projects/tags">See more tags?</a>) : null}
      <button id="reset-tags">Reset</button>
    </div>
    {sortedProjects?.map(project => (
      <Project 
        transitionName={`project-${project.slug}`}
        title={project.data.title} 
        slug={`/projects/${project.slug}`}
        date={project.data.date}
        tags={project.data.tags}
        projectUrl={project.data.projectUrl}
        imageUrl={project.data.image.source.src}
        imageAlt={project.data.image.alt}
        imageCaption={project.data.image.caption}
      />
    ))}
  </section>
</Base>

<style>
  section {
    grid-column: 1 / -1;
    max-width: 1000px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    grid-auto-flow: row;
    gap: 1.5rem;

    [aria-label="filter by tag"] { 
      grid-column: 1 / -1;
      display: flex;
      flex-wrap: wrap;
      align-items: baseline;
      gap: 1rem;
      margin-bottom: 1rem;

      div {
        flex: 1 1 500px;
        display: inline-flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        gap: 0.5rem;

        > .filter {
          white-space: nowrap;
          &::before { content: "#"; }
          &[aria-pressed="true"] { 
            color: var(--text-on-secondary);
            background-color: var(--secondary);
          }
        }
      }

      > #reset-tags { 
        font-size: 1.25rem; 
        font-weight: bold;
        margin-left: auto;
      }
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const projects = document.querySelectorAll(".project");
    const tagButtons = document.querySelectorAll(".filter");
    tagButtons.forEach(button => {
      button.addEventListener("click", event => {
        const target = (event.target as HTMLElement);
        let pressed: boolean = JSON.parse(target.getAttribute("aria-pressed")!);
        target.setAttribute("aria-pressed", String(!pressed));
        projects.forEach(element => {
          let match = Array.from(element.querySelectorAll(".tag"));
          if (match.some(tag => tag.innerHTML === target.innerHTML)) {
            match.filter(tagElement => {
              if (tagElement.innerHTML === target.innerHTML) { (tagElement as HTMLElement).classList.toggle("active"); }
            });
            (element as HTMLElement).classList.toggle("show");
          } else {
            (pressed) ? (element as HTMLElement).classList.remove("hide") : (element as HTMLElement).classList.add("hide");
          }
        });
      });
    });

    document.getElementById("reset-tags")?.addEventListener("click", () => {
      projects.forEach(element => element.classList.remove("hide", "show"));
      document.querySelectorAll(".filter").forEach(element => element.setAttribute("aria-pressed", "false"));
      document.querySelectorAll(".tag").forEach(element => element.classList.remove("active"));
    });
  });
</script>