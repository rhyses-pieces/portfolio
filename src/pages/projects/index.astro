---
import { getCollection } from "astro:content";
import Base from "@/layouts/Base.astro";
import Project from "@/components/Project.astro";

const projects = await getCollection("projects");
const tags: string[] = [];
projects.forEach(item => item.data.tags.forEach(tag => tags.push(tag)));
const tagsList = Array.from(new Set(tags));
---
<Base>
  <h1>Projects</h1>
  <section>
    <nav>
      Tags list:
      <div>
      {tagsList.map(tag => (
        <button class="filter" aria-pressed="false">{tag}</button>
      ))}
      </div>
      <button id="reset-tags">Reset</button>
    </nav>
    {projects?.map((project) => (
      <Project 
        id={project.id}
        title={project.data.title} 
        slug={`/projects/${project.slug}`}
        date={project.data.date}
        tags={project.data.tags}
      />
    ))}
  </section>
</Base>

<style>
  section {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    grid-auto-flow: row;
    gap: 1.5rem;

    & nav { 
      grid-column: 1 / -1;
      display: flex;
      flex-wrap: wrap;
      align-items: baseline;
      gap: 1rem;

      & div {
        flex: 1 1 500px;
        display: inline-flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        gap: 0.5rem;

        & > .filter {
          white-space: nowrap;
          &::before { content: "#"; }
          &[aria-pressed="true"] { 
            color: var(--text-on-accent);
            background-color: var(--accent);
          }
        }
      }

      & > #reset-tags { 
        font-size: 1.25rem; 
        font-weight: bold;
        margin-left: auto;
      }
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const projects = document.querySelectorAll(".project");
    const tagButtons = document.querySelectorAll(".filter");
    tagButtons.forEach(button => {
      button.addEventListener("click", event => {
        const target = (event.target as HTMLElement).innerHTML;
        (button.getAttribute("aria-pressed") === "false")
          ? button.setAttribute("aria-pressed", "true")
          : button.setAttribute("aria-pressed", "false");
        projects.forEach(element => {
          if (button.getAttribute("aria-pressed") === "true") {
            (element as HTMLElement).classList.remove("hide");
          }
          let match = Array.from(element.querySelectorAll(".tag"));
          if (match.some(tag => tag.innerHTML === target)) {
            match.filter(tagElement => {
              if (tagElement.innerHTML === target) {
                (tagElement as HTMLElement).classList.toggle("active");
              }
            });
            (element as HTMLElement).classList.toggle("show");
          } else {
            (button.getAttribute("aria-pressed") === "false")
              ? (element as HTMLElement).classList.remove("hide")
              : (element as HTMLElement).classList.add("hide");
          }
        });
      });
    });

    document.getElementById("reset-tags")?.addEventListener("click", () => {
      projects.forEach(element => element.classList.remove("hide", "show"));
      document.querySelectorAll(".filter").forEach(element => element.setAttribute("aria-pressed", "false"));
      document.querySelectorAll(".tag").forEach(element => element.classList.remove("active"));
    });
  });
</script>