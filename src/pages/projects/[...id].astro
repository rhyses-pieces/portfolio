---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import Markdown from "@/layouts/Markdown.astro";
import Figure from "@/components/Figure.astro";

interface Props { project: CollectionEntry<"projects">; }

export const getStaticPaths = (async () => {
  const projects = await getCollection("projects");
  return projects.map(project => ({
    params: { id: project.id }, props: { project }
  }));
}) satisfies GetStaticPaths;

const { project } = Astro.props;
const { Content } = await render(project);
---
<Markdown frontmatter={project.data} transitionName={`project-${project.id}`}>
  <Figure 
    transition:name={`project-${project.id}-image`}
    src={project.data.image.source} 
    alt={project.data.image.alt} 
    caption={project.data.image.caption}
  />
  <header>
    {project.data.projectUrl ? 
      <h1 transition:name={`project-${project.id}-header`}>
        <a href={project.data.projectUrl} rel="nofollow" title={`External link to ${project.data.title} on ` + (project.data.projectUrl.includes("itch.io") ? "Itch.io" : "GitHub")}>
          {project.data.title}
        </a>
      </h1>
      : <h1 transition:name={`project-${project.id}-header`}>{project.data.title}</h1>
    }
    <a href="/projects">return?</a>
  </header>
  <time datetime={project.data.date.toISOString()}>Posted on {project.data.date.toLocaleDateString(undefined, { dateStyle: "full" })}</time>
  <ul class="tags">
    {project.data.tags.map((tag: string) => (
      <li>{tag}</li>
    ))}
  </ul>
  <section>
    <Content />
  </section>
</Markdown>

<style>
  header {
    display: flex;
    align-items: flex-end;
    flex-wrap: wrap;
    margin: 1rem 0;

    > a { white-space: nowrap; }
    h1 { 
      flex-grow: 1; 
      margin-bottom: 0;

      > a {
        background: var(--text);
        color: var(--background);
        padding: 0.25rem 0.25rem 0;
        text-decoration: underline wavy var(--text) 3px;
        text-underline-offset: 0.75rem;

        &:hover {
          background: transparent;
          color: var(--text);
        }
      }
    }
    /* snippet from https://css-tricks.com/useful-flexbox-technique-alignment-shifting-wrapping/ */
  }

  time { 
    display: inline-block;
    font-size: 1rem; 
    margin: 1rem 0;
  }

  .tags {
    display: flex;
    gap: 1.5rem;
    font-family: var(--accent-font);
    padding: 0.5rem 1.5rem;
    margin-bottom: 2rem;
    border-top: var(--border) var(--border-color);
    border-bottom: var(--border) var(--border-color);

    > li {
      padding: 0.5rem 0.5rem 0.5rem 0.15rem;

      &::marker { content: "#"; }
    }
  }

  section { margin-bottom: 5rem; }

  :global(figure) {margin: 2rem auto 1rem; }
  :global(.fonts-loaded) .tags { font-family: var(--accent-font); }
  :global(code, kbd, pre) {
    background-color: var(--secondary);
    color: var(--primary);
    padding: 0 0.25rem;
    border: var(--border) var(--border-color);
    border-radius: var(--border-radius);
  }
</style>