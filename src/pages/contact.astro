---
import Base from "@/layouts/Base.astro";
import Separator from "@/components/Separator.astro";
import { Icon } from "astro-icon/components";
---
<Base title="rhyses pieces | contact">
  <h1>Contact me</h1>
  <section id="socials">
    <p>You can find me at these places: </p>
    
    <div id="social-cards">
      <article class="card">
        <h2>
          <span aria-hidden>GitHub</span>
          <a href="https://github.com/rhyses-pieces" rel="nofollow">GitHub</a>
        </h2>
        <span class="arrow"></span>
        <Icon name="github" />
      </article>
      <article class="card">
        <h2>
          <span aria-hidden>LinkedIn</span>
          <a href="https://www.linkedin.com/in/irene-kim-1a8079115/" rel="nofollow">LinkedIn</a>
        </h2>
        <span class="arrow"></span>
        <Icon name="linkedin" />
      </article>
      <article class="card">
        <h2>
          <span aria-hidden>Itch.io</span>
          <a href="https://rhyses-pieces.itch.io/" rel="nofollow">Itch.io</a>
        </h2>
        <span class="arrow"></span>
        <Icon name="itch" />
      </article>
    </div>
  </section>

  <p>... or you can: </p>

  <section id="form">
    <h2>Directly email me</h2>
    <p>You can click below to reveal my e-mail address. A prompt will pop up and ask you for a password. The password is <strong id="password">ELYSIUM</strong> but in all lowercase.</p>
    <altcha-widget 
      obfuscated="iLusgai66UhrpeRVuniHB0fNb7I2eefbrmiq+5LHCcqf6CXihm1DH40Z0rwI2BBaYBB/YrrX6tmmfUnE0hbAswbN1Kk=?key=(prompt:Enter password)"
      floating="bottom"
      name="emailObfuscation"
      class="spoiler"
      test={import.meta.env.DEV ? true : undefined}
    >
      <button class="link">Click to reveal</button>
    </altcha-widget>

    <Separator />

    <h2>Send me a message</h2>
    <form id="contact" name="contact" method="post" action="https://api.staticforms.xyz/submit">
      <input type="hidden" name="accessKey" value="3bc04886-314f-4a7d-a54c-73826057689a" />
      <input type="hidden" name="redirectTo" value={`${Astro.url.origin}/thank-you`} />
      <input type="hidden" name="replyTo" value="@" />
      
      <label for="name">
        Name
        <input type="text" name="name" id="name" required />
      </label>
      <span id="name-help" aria-live="polite"></span>

      <label for="email">
        Email
        <input type="email" name="email" id="email" required />
      </label>
      <span id="email-help" aria-live="polite"></span>

      <label for="message">
        Message
        <textarea name="message" id="message" rows="10" minlength="2" required></textarea>
      </label>
      <span id="message-help" aria-live="polite"></span>
      
      <altcha-widget 
        challengeUrl="https://us.altcha.org/api/v1/challenge?apiKey=ckey_01d1541a19f0b2c9117351b30e12"
        class="altcha"
        strings="{&quot;label&quot;:&quot;I promise I'm up to only good.&quot;}"
        spamFilter
        test={import.meta.env.DEV ? true : undefined}
      >
      </altcha-widget>
      <button type="submit">Send</button>
    </form>
  </section>
</Base>

<style>
  :root {
    --altcha-border-width: 2px;
    --altcha-color-border: var(--border-color);
    --altcha-color-base: var(--background);
    --altcha-color-text: var(--text);
    --altcha-color-error-text: var(--red);
    --altcha-color-footer-bg: var(--secondary);
  }

  #social-cards {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
    margin-top: 1rem;
    width: 100%;

    .card {
      position: relative;
      display: flex;
      flex-flow: row wrap-reverse;
      align-items: center;
      justify-content: space-between;
      padding: 0.75em;
      border: var(--border) var(--border-color);
      width: clamp(44px, 18ch, 35ch);
      box-shadow: var(--box-shadow);
      transition: all 0.5s ease-in-out;

      &:nth-of-type(2n + 1) { transform: rotate(2deg); }
      &:nth-of-type(3n) { transform: rotate(-1.5deg); }
      &:hover {
        box-shadow: 0 0 var(--border-color);

        .arrow {
          opacity: 1;
          
          @media (prefers-reduced-motion: no-preference) {
            transform: translateX(0);
          }
        }
      }

      a {
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        display: block;
        padding: 1rem;
      }

      [data-icon] {
        font-size: 2em;
        color: var(--primary);
      }

      .arrow {
        display: block;
        opacity: 0;
        width: 1em;
        height: 1em;
        background-color: var(--primary);
        clip-path: polygon(100% 50%, 0 0, 0 100%);
        transition: all 0.5s ease-in-out;

        @media (prefers-reduced-motion: no-preference) {
          transform: translateX(-0.5em);
        }
      }

      h2 {
        font-size: 1.75rem;
        font-weight: normal;

        [aria-hidden] {
          opacity: 0;
          height: 0;
          user-select: none;
        }
      }
    }
  }

  .link {
    cursor: pointer;
    background-color: transparent;
    border: none;
  }

  .spoiler {
    display: grid;
    place-content: center;
    margin-top: 1rem;

    &:has([data-state="verifying"]) * {
      transition: none;
      background-color: var(--text);
      text-decoration: none;
    }
  }

  #password {
    font-family: var(--accent-font);
    letter-spacing: 0.0175em;
    line-height: 1;
    color: color-mix(in oklab, var(--text) 70%, var(--background));
  }

  #form {
    margin: 0 1rem 5rem;
    padding: 1rem;
    border: var(--border) var(--border-color);
    border-radius: var(--container-radius);
    box-shadow: var(--box-shadow);
  }

  form {
    display: flex;
    flex-flow: column;

    altcha-widget.altcha {
      margin: 1em auto;
      font-size: 1rem;
    }

    label {
      display: flex;
      flex-flow: inherit;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    [id$="-help"] {
      opacity: 0.95;
      margin-top: 0.5rem;

      :global(.error) {
        padding: 0.25rem 0.5rem;
        background-color: var(--red-bg);
        color: var(--text-on-red);
        border: 1px solid var(--red);
        border-radius: var(--border-radius);
      }
    }

    button {
      width: min-content;
      align-self: center;
      font-size: 2rem;
      margin: 1rem 0;
    }
  }
</style>

<script>
  import suite from "@/utils/suite";
  import "altcha";
  import "altcha/obfuscation";

  document.addEventListener("DOMContentLoaded", () => {
    const nameField = document.getElementById("name") as HTMLInputElement;
    const emailField = document.getElementById("email") as HTMLInputElement;
    const messageField = document.getElementById("message") as HTMLTextAreaElement;

    const nameError = document.getElementById("name-help");
    const emailError = document.getElementById("email-help");
    const messageError = document.getElementById("message-help");
    
    nameField?.addEventListener("input", () => {
      let name = { name: nameField.value };
      let result = suite(name);
      if (result.isValid("name")) {
        nameError!.innerHTML = "";
      } else if (result.hasErrors("name")) {
        nameError!.innerHTML = `<small class="error"><strong>Error:</strong> ${result.getErrors("name")[0]}</small>`;
      }
    });

    emailField?.addEventListener("input", () => {
      let email = { email: emailField.value };
      let result = suite(email);
      if (result.isValid("email")) {
        emailError!.innerHTML = "";
      } else if (result.hasErrors("email")) {
        emailError!.innerHTML = `<small class="error"><strong>Error:</strong> ${result.getErrors("email")[0]}</small>`;
      }
    });

    messageField?.addEventListener("input", () => {
      let message = { message: messageField.value };
      let result = suite(message);
      if (result.isValid("message")) {
        messageError!.innerHTML = "";
      } else if (result.hasErrors("message")) {
        messageError!.innerHTML = `<small class="error"><strong>Error:</strong> ${result.getErrors("message")[0]}</small>`;
      }
    });
  });
</script>